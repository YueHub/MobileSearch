/******/
(function (modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/
    var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/
    function __webpack_require__(moduleId) {
        /******/
        /******/ 		// Check if module is in cache
        /******/
        if (installedModules[moduleId]) {
            /******/
            return installedModules[moduleId].exports;
            /******/
        }
        /******/ 		// Create a new module (and put it into the cache)
        /******/
        var module = installedModules[moduleId] = {
            /******/            i: moduleId,
            /******/            l: false,
            /******/            exports: {}
            /******/
        };
        /******/
        /******/ 		// Execute the module function
        /******/
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ 		// Flag the module as loaded
        /******/
        module.l = true;
        /******/
        /******/ 		// Return the exports of the module
        /******/
        return module.exports;
        /******/
    }

    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/
    __webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/
    __webpack_require__.c = installedModules;
    /******/
    /******/ 	// define getter function for harmony exports
    /******/
    __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
            /******/
            Object.defineProperty(exports, name, {
                /******/                configurable: false,
                /******/                enumerable: true,
                /******/                get: getter
                /******/
            });
            /******/
        }
        /******/
    };
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/
    __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
            /******/            function getDefault() {
                return module['default'];
            } :
            /******/            function getModuleExports() {
                return module;
            };
        /******/
        __webpack_require__.d(getter, 'a', getter);
        /******/
        return getter;
        /******/
    };
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/
    __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    };
    /******/
    /******/ 	// __webpack_public_path__
    /******/
    __webpack_require__.p = "";
    /******/
    /******/ 	// Load entry module and return exports
    /******/
    return __webpack_require__(__webpack_require__.s = 7);
    /******/
})
/************************************************************************/
/******/({

    /***/ 7:
    /***/ (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(8);


        /***/
    }),

    /***/ 8:
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


// Generated by CoffeeScript 1.4.0
        (function () {
            var $;

            $ = window.jQuery || window.Zepto || window.$;

            $.fn.fancySelect = function (opts) {
                var isiOS, settings;
                if (opts == null) {
                    opts = {};
                }
                settings = $.extend({
                    forceiOS: false,
                    includeBlank: false,
                    optionTemplate: function optionTemplate(optionEl) {
                        return optionEl.text();
                    },
                    triggerTemplate: function triggerTemplate(optionEl) {
                        return optionEl.text();
                    }
                }, opts);
                isiOS = !!navigator.userAgent.match(/iP(hone|od|ad)/i);
                return this.each(function () {
                    var copyOptionsToList, disabled, options, sel, trigger, updateTriggerText, wrapper;
                    sel = $(this);
                    if (sel.hasClass('fancified') || sel[0].tagName !== 'SELECT') {
                        return;
                    }
                    sel.addClass('fancified');
                    sel.css({
                        width: 1,
                        height: 1,
                        display: 'block',
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        opacity: 0
                    });
                    sel.wrap('<div class="fancy-select">');
                    wrapper = sel.parent();
                    if (sel.data('class')) {
                        wrapper.addClass(sel.data('class'));
                    }
                    wrapper.append('<div class="trigger">');
                    if (!(isiOS && !settings.forceiOS)) {
                        wrapper.append('<ul class="options">');
                    }
                    trigger = wrapper.find('.trigger');
                    options = wrapper.find('.options');
                    disabled = sel.prop('disabled');
                    if (disabled) {
                        wrapper.addClass('disabled');
                    }
                    updateTriggerText = function updateTriggerText() {
                        var triggerHtml;
                        triggerHtml = settings.triggerTemplate(sel.find(':selected'));
                        return trigger.html(triggerHtml);
                    };
                    sel.on('blur.fs', function () {
                        if (trigger.hasClass('open')) {
                            return setTimeout(function () {
                                return trigger.trigger('close.fs');
                            }, 120);
                        }
                    });
                    trigger.on('close.fs', function () {
                        trigger.removeClass('open');
                        return options.removeClass('open');
                    });
                    trigger.on('click.fs', function () {
                        var offParent, parent;
                        if (!disabled) {
                            trigger.toggleClass('open');
                            if (isiOS && !settings.forceiOS) {
                                if (trigger.hasClass('open')) {
                                    return sel.focus();
                                }
                            } else {
                                if (trigger.hasClass('open')) {
                                    parent = trigger.parent();
                                    offParent = parent.offsetParent();
                                    if (parent.offset().top + parent.outerHeight() + options.outerHeight() + 20 > $(window).height() + $(window).scrollTop()) {
                                        options.addClass('overflowing');
                                    } else {
                                        options.removeClass('overflowing');
                                    }
                                }
                                options.toggleClass('open');
                                if (!isiOS) {
                                    return sel.focus();
                                }
                            }
                        }
                    });
                    sel.on('enable', function () {
                        sel.prop('disabled', false);
                        wrapper.removeClass('disabled');
                        disabled = false;
                        return copyOptionsToList();
                    });
                    sel.on('disable', function () {
                        sel.prop('disabled', true);
                        wrapper.addClass('disabled');
                        return disabled = true;
                    });
                    sel.on('change.fs', function (e) {
                        if (e.originalEvent && e.originalEvent.isTrusted) {
                            return e.stopPropagation();
                        } else {
                            return updateTriggerText();
                        }
                    });
                    sel.on('keydown', function (e) {
                        var hovered, newHovered, w;
                        w = e.which;
                        hovered = options.find('.hover');
                        hovered.removeClass('hover');
                        if (!options.hasClass('open')) {
                            if (w === 13 || w === 32 || w === 38 || w === 40) {
                                e.preventDefault();
                                return trigger.trigger('click.fs');
                            }
                        } else {
                            if (w === 38) {
                                e.preventDefault();
                                if (hovered.length && hovered.index() > 0) {
                                    hovered.prev().addClass('hover');
                                } else {
                                    options.find('li:last-child').addClass('hover');
                                }
                            } else if (w === 40) {
                                e.preventDefault();
                                if (hovered.length && hovered.index() < options.find('li').length - 1) {
                                    hovered.next().addClass('hover');
                                } else {
                                    options.find('li:first-child').addClass('hover');
                                }
                            } else if (w === 27) {
                                e.preventDefault();
                                trigger.trigger('click.fs');
                            } else if (w === 13 || w === 32) {
                                e.preventDefault();
                                hovered.trigger('click.fs');
                            } else if (w === 9) {
                                if (trigger.hasClass('open')) {
                                    trigger.trigger('close.fs');
                                }
                            }
                            newHovered = options.find('.hover');
                            if (newHovered.length) {
                                options.scrollTop(0);
                                return options.scrollTop(newHovered.position().top - 12);
                            }
                        }
                    });
                    options.on('click.fs', 'li', function (e) {
                        var clicked;
                        clicked = $(this);
                        sel.val(clicked.data('raw-value'));
                        if (!isiOS) {
                            sel.trigger('blur.fs').trigger('focus.fs');
                        }
                        options.find('.selected').removeClass('selected');
                        clicked.addClass('selected');
                        trigger.addClass('selected');

                        /* 修改form表单 */
                        if (clicked.attr("data-raw-value") == 1) {
                            $("#search-form").attr("action", "mobile_result.jsp");
                        } else if (clicked.attr("data-raw-value") == 2) {
                            $("#search-form").attr("action", "http://139.129.96.158:8080/DeepAnswer/front/developerAction!answer.action");
                        }

                        /* 修改form表单 */
                        return sel.val(clicked.data('raw-value')).trigger('change.fs').trigger('blur.fs').trigger('focus.fs');
                    });
                    options.on('mouseenter.fs', 'li', function () {
                        var hovered, nowHovered;
                        nowHovered = $(this);
                        hovered = options.find('.hover');
                        hovered.removeClass('hover');
                        return nowHovered.addClass('hover');
                    });
                    options.on('mouseleave.fs', 'li', function () {
                        return options.find('.hover').removeClass('hover');
                    });
                    copyOptionsToList = function copyOptionsToList() {
                        var selOpts;
                        updateTriggerText();
                        if (isiOS && !settings.forceiOS) {
                            return;
                        }
                        selOpts = sel.find('option');
                        return sel.find('option').each(function (i, opt) {
                            var optHtml;
                            opt = $(opt);
                            if (!opt.prop('disabled') && (opt.val() || settings.includeBlank)) {
                                optHtml = settings.optionTemplate(opt);
                                if (opt.prop('selected')) {
                                    return options.append("<li data-raw-value=\"" + opt.val() + "\" class=\"selected\">" + optHtml + "</li>");
                                } else {
                                    return options.append("<li data-raw-value=\"" + opt.val() + "\">" + optHtml + "</li>");
                                }
                            }
                        });
                    };
                    sel.on('update.fs', function () {
                        wrapper.find('.options').empty();
                        return copyOptionsToList();
                    });
                    return copyOptionsToList();
                });
            };
        }).call(undefined);

        /***/
    })

    /******/
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,